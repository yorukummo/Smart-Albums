version: '3.8'

services:
  # MLflow сервер для трекинга экспериментов
  mlflow:
    image: python:3.9-slim
    ports:
      - "5000:5000"
    volumes:
      - mlflow_data:/mlflow
      - ./artifacts:/mlflow/artifacts
    environment:
      - MLFLOW_BACKEND_STORE_URI=sqlite:///mlflow/mlflow.db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    command: >
      bash -c "pip install mlflow psycopg2-binary boto3 && 
              mlflow server --host 0.0.0.0 --port 5000 
              --backend-store-uri=$${MLFLOW_BACKEND_STORE_URI} 
              --default-artifact-root=$${MLFLOW_DEFAULT_ARTIFACT_ROOT}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL для хранения метаданных MLflow
  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: mlflow
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: mlflow_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis для кеширования и очередей задач
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Основной Python-сервис
  photo-optimizer:
    build:
      context: .
      dockerfile: Dockerfile.python
    depends_on:
      - mlflow
      - postgres
      - redis
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - ./compressed:/app/compressed
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - PYTHONPATH=/app
    ports:
      - "8000:8000"
    command: python train.py --config config.json

  # Go-сервис для сжатия
  image-compressor:
    build:
      context: .
      dockerfile: Dockerfile.go
    volumes:
      - ./data:/app/data
      - ./compressed:/app/compressed
    environment:
      - GZIP_LEVEL=6
      - MAX_WORKERS=4
    ports:
      - "8080:8080"

  # Jupyter Notebook для анализа данных
  jupyter:
    image: jupyter/tensorflow-notebook:latest
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/work/data
      - ./models:/home/jovyan/work/models
    environment:
      - JUPYTER_ENABLE_LAB=yes
    command: start-notebook.sh --NotebookApp.token='' --NotebookApp.password=''

  # Grafana для мониторинга
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus

  # Prometheus для сбора метрик
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Nginx для балансировки нагрузки
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - photo-optimizer
      - image-compressor

volumes:
  mlflow_data:
  postgres_data:
  redis_data:
  grafana_data:
  prometheus_data:

networks:
  default:
    driver: bridge